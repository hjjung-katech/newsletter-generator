name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run black
      run: black --check newsletter tests
      
    - name: Run isort
      run: isort --check-only --profile black newsletter tests
      
    - name: Run flake8
      run: flake8 newsletter tests --max-line-length=88 --ignore=E203,W503
      
    - name: Run tests
      env:
        MOCK_MODE: true
        OPENAI_API_KEY: test-key
        SERPER_API_KEY: test-key
      run: |
        python -m pytest tests/ -v --tb=short --cov=newsletter --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit Security Linter
      uses: securecodewarrior/github-action-bandit@v1.0.1
      with:
        args: '-r newsletter -f json -o bandit-report.json'
        
    - name: Upload Bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-results
        path: bandit-report.json

  deploy:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Railway
      uses: railway-app/deploy@v2
      with:
        railway-token: ${{ secrets.RAILWAY_TOKEN }}
        service: newsletter-generator
        
    - name: Run smoke tests
      env:
        DEPLOYED_URL: ${{ secrets.DEPLOYED_URL }}
      run: |
        sleep 30  # Wait for deployment
        curl -f $DEPLOYED_URL/health || exit 1
        curl -f "$DEPLOYED_URL/newsletter?period=7" | grep -v "Mock" || echo "Warning: Still returning mock data"
  
  # 참고: code-quality.yml 워크플로우에서 코드 품질 검사(Black)를 실행합니다.
  # 이 CI 워크플로우는 테스트에만 집중합니다.
  
  # 향후 안정화된 후 전체 테스트 추가 예정입니다.
  
  # 향후 다른 테스트를 추가할 경우를 위한 작업 예시
  # full_tests:
  #   name: Run Full Test Suite
  #   runs-on: ubuntu-latest
  #   needs: minimal_tests
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.10'
  #   
  #   - name: Install all dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       python -m pip install -r requirements.txt
  #       python -m pip install pytest pytest-cov pytest-mock
  #   
  #   - name: Set up test environment
  #     run: |
  #       mkdir -p output
  #       # 필요한 환경 변수 설정
  #       echo "GEMINI_API_KEY=dummy_key_for_testing" >> $GITHUB_ENV
  #       echo "SERPER_API_KEY=dummy_key_for_testing" >> $GITHUB_ENV
  #   
  #   - name: Run full test suite
  #     env:
  #       PYTHONPATH: ${{ github.workspace }}
  #     run: |
  #       # 전체 테스트 실행 또는 개별 테스트 지정 가능
  #       # python -m pytest tests/ 