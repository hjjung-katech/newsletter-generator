name: Email Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'web/mail.py'
      - 'web/types.py' 
      - 'tests/test_web_mail.py'
      - 'tests/test_web_api.py'
      - 'tests/test_mail.py'
  pull_request:
    branches: [main]
    paths:
      - 'web/mail.py'
      - 'web/types.py'
      - 'tests/test_web_mail.py' 
      - 'tests/test_web_api.py'
      - 'tests/test_mail.py'
  workflow_dispatch:

jobs:
  email-unit-tests:
    name: Email Unit Tests (Mocked)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Create required directories
      run: |
        mkdir -p output
        mkdir -p debug_files
        mkdir -p templates
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run email unit tests (mocked)
      env:
        MOCK_MODE: true
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "üß™ Running mocked email tests (no real API calls)"
        python -m pytest tests/test_web_mail.py -v --tb=short -k "not real_api"
        python -m pytest tests/test_mail.py -v --tb=short -k "not real_api"
        echo "‚úÖ All mocked email tests passed"

  email-integration-tests:
    name: Email Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Create required directories
      run: |
        mkdir -p output
        mkdir -p debug_files
        mkdir -p templates
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Check Postmark token availability
      id: check_token
      run: |
        if [ -n "${{ secrets.POSTMARK_SERVER_TOKEN }}" ]; then
          echo "token_available=true" >> $GITHUB_OUTPUT
          echo "‚úÖ POSTMARK_SERVER_TOKEN is available for integration tests"
        else
          echo "token_available=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è  POSTMARK_SERVER_TOKEN not available - will skip real email tests"
        fi
    
    - name: Run email integration tests (with real API)
      if: steps.check_token.outputs.token_available == 'true'
      env:
        POSTMARK_SERVER_TOKEN: ${{ secrets.POSTMARK_SERVER_TOKEN }}
        EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
        TEST_EMAIL_RECIPIENT: ${{ secrets.TEST_EMAIL_RECIPIENT }}
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "üîó Running real email integration tests"
        python -m pytest tests/test_web_api.py -v --tb=short -k "email"
        echo "‚úÖ All email integration tests passed"
    
    - name: Skip email integration tests (no token)
      if: steps.check_token.outputs.token_available == 'false'
      run: |
        echo "‚è≠Ô∏è  Skipping real email integration tests - POSTMARK_SERVER_TOKEN not configured"
        echo "To enable these tests, add POSTMARK_SERVER_TOKEN to repository secrets"
        echo "Also add EMAIL_SENDER and TEST_EMAIL_RECIPIENT secrets if needed"
        
  cli-email-tests:
    name: CLI Email Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Create required directories
      run: |
        mkdir -p output
        mkdir -p debug_files
        mkdir -p templates
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Check Postmark token for CLI tests
      id: check_cli_token
      run: |
        if [ -n "${{ secrets.POSTMARK_SERVER_TOKEN }}" ]; then
          echo "token_available=true" >> $GITHUB_OUTPUT
          echo "‚úÖ POSTMARK_SERVER_TOKEN available for CLI email tests"
        else
          echo "token_available=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è  POSTMARK_SERVER_TOKEN not available - will test dry-run mode only"
        fi
    
    - name: Run CLI email tests (dry-run mode)
      env:
        PYTHONPATH: ${{ github.workspace }}
        TEST_EMAIL_RECIPIENT: test@example.com
      run: |
        echo "üñ•Ô∏è  Testing CLI email functionality in dry-run mode"
        python -m pytest tests/test_email_delivery.py -v --tb=short -k "dry_run"
        echo "‚úÖ CLI dry-run email tests passed"
    
    - name: Run CLI email tests (with real token)
      if: steps.check_cli_token.outputs.token_available == 'true'
      env:
        POSTMARK_SERVER_TOKEN: ${{ secrets.POSTMARK_SERVER_TOKEN }}
        EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
        TEST_EMAIL_RECIPIENT: ${{ secrets.TEST_EMAIL_RECIPIENT }}
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "üîó Testing CLI email with real configuration"
        python -m pytest tests/test_email_delivery.py -v --tb=short -k "config_validation"
        echo "‚úÖ CLI email configuration tests passed"
    
    - name: CLI email tests summary
      run: |
        echo "üìã CLI Email Tests Summary:"
        echo "‚úÖ Dry-run mode tests: Always executed"
        if [ "${{ steps.check_cli_token.outputs.token_available }}" == "true" ]; then
          echo "‚úÖ Real token tests: Executed with secrets"
        else
          echo "‚è≠Ô∏è  Real token tests: Skipped (no POSTMARK_SERVER_TOKEN)"
        fi 