name: Newsletter Generator CI

on:
  push:
    branches:
      - main
    paths:
      - 'config.yml'
      - '.github/workflows/newsletter.yml'
      - 'newsletter/**/*.py' # Added to trigger on changes to Python files in the newsletter directory
      - 'requirements.txt'   # Added to trigger on dependency changes
  schedule:
    # 한국 시간 기준 매일 오전 8시에 실행 (UTC 23:00)
    # You can adjust the schedule as needed.
    - cron: '0 23 * * *'
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  generate_and_distribute_newsletter:
    runs-on: ubuntu-latest
    permissions:
      contents: write # For committing to gh-pages branch
      pages: write    # For deploying to GitHub Pages
      id-token: write # For OIDC token if used by an action

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Ensure this matches your project's Python version

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -e . # Install the project in development mode for more reliable imports

      - name: Ensure output directory exists
        run: |
          mkdir -p ./output

      - name: Generate Newsletter
        id: generate_newsletter
        env: # Python 스크립트에서 사용할 환경 변수 설정
          SERPER_API_KEY: ${{ secrets.SERPER_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          # 필요한 다른 API 키나 설정도 여기에 추가
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
        run: |
          # 프로젝트의 CLI를 사용하여 뉴스레터 생성
          # 환경변수 확인
          echo "Checking configuration..."
          if [ -z "$GEMINI_API_KEY" ]; then
            echo "Warning: GEMINI_API_KEY is not set. Newsletter generation may use fallback mode."
          fi
          if [ -z "$SERPER_API_KEY" ]; then
            echo "Warning: SERPER_API_KEY is not set. News collection may be limited."
          fi
          
          # Newsletter 생성 실행
          newsletter run --config config.yml

          # 스크립트가 config.yml에 지정된 output_directory에 파일을 생성한다고 가정합니다.
          # 아래 GITHUB_OUTPUT 설정은 config.yml을 읽어서 동적으로 설정합니다.
          CONFIG_OUTPUT_DIR=$(python -c "import yaml; config=yaml.safe_load(open('config.yml')); print(config.get('newsletter_settings', {}).get('output_directory', './output'))")
          CONFIG_OUTPUT_FORMAT=$(python -c "import yaml; config=yaml.safe_load(open('config.yml')); print(config.get('newsletter_settings', {}).get('output_format', 'html'))")
          CONFIG_TITLE=$(python -c "import yaml; config=yaml.safe_load(open('config.yml')); print(config.get('newsletter_settings', {}).get('title', '오늘의 주요 뉴스 업데이트'))")

          echo "Output directory: $CONFIG_OUTPUT_DIR"
          echo "Output format: $CONFIG_OUTPUT_FORMAT"
          
          # 출력 파일 존재 확인
          NEWSLETTER_FILE="$CONFIG_OUTPUT_DIR/newsletter.$CONFIG_OUTPUT_FORMAT"
          if [ -f "$NEWSLETTER_FILE" ]; then
            echo "Newsletter file generated successfully: $NEWSLETTER_FILE"
          else
            echo "Warning: Expected newsletter file not found at $NEWSLETTER_FILE"
            # 대체 파일명 확인 (날짜 포함된 파일명 등)
            ls -la $CONFIG_OUTPUT_DIR
          fi

          echo "newsletter_html_path=$CONFIG_OUTPUT_DIR/newsletter.$CONFIG_OUTPUT_FORMAT" >> $GITHUB_OUTPUT
          # md 파일도 생성한다면 유사하게 추가 (필요한 경우)
          # echo "newsletter_md_path=$CONFIG_OUTPUT_DIR/newsletter.md" >> $GITHUB_OUTPUT 
          echo "newsletter_output_dir=$CONFIG_OUTPUT_DIR" >> $GITHUB_OUTPUT
          echo "newsletter_title=$CONFIG_TITLE" >> $GITHUB_OUTPUT

      # --- 옵션 1: 이메일로 뉴스레터 발송 ---
      - name: Send Newsletter Email
        if: false # 이메일 발송을 비활성화하여 파일 생성 테스트에 집중
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com # Replace with your SMTP server
          server_port: 465
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: '[뉴스레터] ${{ steps.generate_newsletter.outputs.newsletter_title }} - ${{ github.run_number }}'
          to: ${{ secrets.EMAIL_RECIPIENTS }} # Comma-separated list from secrets
          from: 'Newsletter Bot <${{ secrets.MAIL_USERNAME }}>'
          html_body: file://${{ steps.generate_newsletter.outputs.newsletter_html_path }}
          content_type: text/html
          # Attachments can be added if needed
          # attachments: ${{ steps.generate_newsletter.outputs.newsletter_md_path }}

      # --- 옵션 2: GitHub Pages로 뉴스레터 게시 ---
      - name: Deploy to GitHub Pages
        if: success() && github.ref == 'refs/heads/main' # Add condition based on config.yml
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN is automatically available
          publish_dir: ${{ steps.generate_newsletter.outputs.newsletter_output_dir }} # Directory containing newsletter.html
          publish_branch: gh-pages # Branch to deploy to
          commit_message: 'Automated deploy: Newsletter update (${{ github.sha }})'
          # user_name: 'github-actions[bot]'
          # user_email: 'github-actions[bot]@users.noreply.github.com'
          # keep_files: true # Set to true if you want to keep existing files in gh-pages branch

      # --- 옵션 3: 생성된 뉴스레터를 아티팩트로 저장 ---
      - name: Upload Newsletter Artifact
        if: success() # Add condition based on config.yml
        uses: actions/upload-artifact@v4
        with:
          name: newsletter-output-${{ github.run_number }}
          path: |
            ${{ steps.generate_newsletter.outputs.newsletter_output_dir }}/*.html
            ${{ steps.generate_newsletter.outputs.newsletter_output_dir }}/*.md
          retention-days: 7
