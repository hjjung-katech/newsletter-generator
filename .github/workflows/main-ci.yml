name: Main CI Pipeline

on:
  push:
    branches: [main, develop, 'feature/**', 'fix/**']
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.10'
  CACHE_VERSION: v1

jobs:
  # ========================================
  # Stage 1: Code Quality & Security
  # ========================================
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pre-commit
          key: ${{ runner.os }}-quality-${{ env.CACHE_VERSION }}-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-quality-${{ env.CACHE_VERSION }}-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy bandit
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Code formatting (Black)
        run: black --check --diff newsletter tests web
      
      - name: Import sorting (isort)
        run: isort --check-only --diff --profile black newsletter tests web
      
      - name: Linting (flake8)
        run: flake8 newsletter tests web --max-line-length=88 --ignore=E203,W503
      
      - name: Type checking (mypy)
        run: |
          mypy newsletter --ignore-missing-imports || true
      
      - name: Basic security scan (Bandit)
        run: |
          bandit -r newsletter web -f txt --skip B104,B110 || true

  # ========================================
  # Stage 2: Unit Tests (Multi-Platform)
  # ========================================
  unit-tests:
    name: Unit Tests - ${{ matrix.os }}
    needs: [quality-checks]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
        exclude:
          - os: windows-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.12'
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Create required directories
        run: |
          mkdir -p output
          mkdir -p output/test_results
          mkdir -p debug_files
          mkdir -p templates
        shell: bash
      
      - name: Run unit tests
        env:
          MOCK_MODE: 'true'
          TESTING: '1'
          PYTHONPATH: ${{ github.workspace }}
          # Dummy test environment variables
          OPENAI_API_KEY: test-key
          SERPER_API_KEY: test-key
          GEMINI_API_KEY: test-key
          ANTHROPIC_API_KEY: test-key
          POSTMARK_SERVER_TOKEN: dummy-token
          EMAIL_SENDER: test@example.com
        run: |
          pytest -m unit --tb=short --junitxml=test-results-unit.xml --cov=newsletter --cov-report=xml --cov-report=html
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-unit-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            test-results-*.xml
            coverage.xml
            htmlcov/

  # ========================================
  # Stage 3: Mock API Tests
  # ========================================
  mock-api-tests:
    name: Mock API Tests
    needs: [unit-tests]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Create required directories
        run: |
          mkdir -p output
          mkdir -p debug_files
          mkdir -p templates
      
      - name: Run mock API tests
        env:
          MOCK_MODE: 'true'
          TESTING: '1'
          PYTHONPATH: ${{ github.workspace }}
          OPENAI_API_KEY: test-key
          SERPER_API_KEY: test-key
          GEMINI_API_KEY: test-key
          ANTHROPIC_API_KEY: test-key
          POSTMARK_SERVER_TOKEN: dummy-token
          EMAIL_SENDER: test@example.com
        run: |
          pytest -m mock_api --tb=short --junitxml=test-results-mock-api.xml
      
      - name: Run web mail tests
        env:
          MOCK_MODE: 'true'
          TESTING: '1'
          PYTHONPATH: ${{ github.workspace }}
          POSTMARK_SERVER_TOKEN: dummy-token
          EMAIL_SENDER: test@example.com
        run: |
          pytest tests/test_web_mail.py -v --tb=short
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-mock-api
          path: test-results-*.xml

  # ========================================
  # Stage 4: Integration Tests (Optional)
  # ========================================
  integration-tests:
    name: Integration Tests
    needs: [mock-api-tests]
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Create required directories
        run: |
          mkdir -p output
          mkdir -p debug_files
          mkdir -p templates
      
      - name: Run integration tests
        env:
          RUN_INTEGRATION_TESTS: '1'
          TESTING: '1'
          PYTHONPATH: ${{ github.workspace }}
          # Use secrets if available, otherwise skip
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'skip' }}
          SERPER_API_KEY: ${{ secrets.SERPER_API_KEY || 'skip' }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || 'skip' }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || 'skip' }}
          POSTMARK_SERVER_TOKEN: ${{ secrets.POSTMARK_SERVER_TOKEN || 'skip' }}
          EMAIL_SENDER: ${{ secrets.EMAIL_SENDER || 'test@example.com' }}
          TEST_EMAIL_RECIPIENT: ${{ secrets.TEST_EMAIL_RECIPIENT || 'test@example.com' }}
        run: |
          if [ "$OPENAI_API_KEY" = "skip" ]; then
            echo "Skipping integration tests - API keys not configured"
            pytest -m "integration and not real_api" --tb=short || true
          else
            echo "Running integration tests with real APIs"
            pytest -m integration --tb=short --junitxml=test-results-integration.xml
          fi
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-integration
          path: test-results-*.xml

  # ========================================
  # Stage 5: Test Reports
  # ========================================
  test-report:
    name: Test Report & Coverage
    needs: [unit-tests, mock-api-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true
      
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            test-results-*.xml
          check_name: Test Results
          comment_mode: always
      
      - name: Generate test summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage Report" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage.xml ]; then
            echo "✅ Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Coverage report not found" >> $GITHUB_STEP_SUMMARY
          fi

  # ========================================
  # Stage 6: Build Check
  # ========================================
  build-check:
    name: Build Check
    needs: [mock-api-tests]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller build
      
      - name: Test package build
        run: |
          python -m build
      
      - name: Test PyInstaller build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          python build_web_exe_enhanced.py
        continue-on-error: true
      
      - name: Upload build artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}
          path: |
            dist/
            *.exe
            *.spec