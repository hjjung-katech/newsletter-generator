name: 🔒 Security Scan

on:
  push:
    branches: [main, develop]
    paths:
      - '**.py'
      - 'Dockerfile'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - '.github/workflows/security-scan.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - '**.py'
      - 'Dockerfile'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - '.github/workflows/security-scan.yml'
  schedule:
    # 매주 월요일 오전 2시 (UTC)에 정기 스캔
    - cron: '0 2 * * 1'

jobs:
  detect-secrets:
    name: 🕵️ Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 필요

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Install detect-secrets
        run: |
          pip install detect-secrets

      - name: Run detect-secrets scan
        run: |
          detect-secrets scan .secrets.baseline --force-use-all-plugins
          
      - name: Verify secrets baseline
        run: |
          detect-secrets audit .secrets.baseline --diff

      - name: Upload scan results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: secrets-scan-results
          path: .secrets.baseline

  bandit-security:
    name: 🛡️ Python Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Bandit security scan
        run: |
          bandit -r newsletter/ -f json -o bandit-report.json || true
          bandit -r newsletter/ -f txt

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  trivy-fs-scan:
    name: 🔍 Filesystem Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'  # 취약점이 있어도 워크플로우 중단하지 않음

      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: Run Trivy vulnerability scanner (table output)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          severity: 'CRITICAL,HIGH'

  trivy-docker-scan:
    name: 🐳 Docker Image Security Scan
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'Dockerfile') || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t newsletter-app:latest .

      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'newsletter-app:latest'
          format: 'sarif'
          output: 'trivy-docker-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: Upload Trivy Docker scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-docker-results.sarif'

      - name: Run Trivy Docker scan (table output)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'newsletter-app:latest'
          format: 'table'
          severity: 'CRITICAL,HIGH'

  dependency-review:
    name: 📦 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: high

  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [detect-secrets, bandit-security, trivy-fs-scan]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create security summary
        run: |
          echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scan Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Secret Detection**: ${{ needs.detect-secrets.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Security**: ${{ needs.bandit-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Filesystem Scan**: ${{ needs.trivy-fs-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🛡️ F-14 Centralized Settings Security Features:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SecretStr type for sensitive data" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Automatic secret masking in logs" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Environment variable validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ .env file exclusion from Docker images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f security-reports/bandit-report.json ]; then
            echo "## Bandit Issues Found:" >> $GITHUB_STEP_SUMMARY
            jq -r '.results[] | "- **\(.issue_severity)**: \(.issue_text) (\(.filename):\(.line_number))"' security-reports/bandit-report.json >> $GITHUB_STEP_SUMMARY || true
          fi 