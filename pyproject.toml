[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "newsletter-generator"
version = "0.6.0"
description = "AI Newsletter Generator"
readme = "README.md"
authors = [
    {name = "Newsletter Generator Team", email = "example@corp.com"},
]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# Core runtime dependencies
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "jinja2>=3.1.2",
    "python-multipart>=0.0.6",
    "httpx>=0.25.0",
    "beautifulsoup4>=4.12.0",
    "python-dateutil>=2.8.2",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-dotenv>=1.0.0",
    "feedparser>=6.0.10",
    "requests>=2.31.0",
    "redis>=5.0.0",
    "rq>=1.15.0",
    "sentry-sdk[fastapi]>=1.38.0",
    "langchain>=0.1.0",
    "langchain-openai>=0.0.5",
    "langchain-anthropic>=0.1.0",
    "langchain-google-genai>=1.0.0",
    "postmarker>=0.21.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "detect-secrets>=1.4.0",
    "responses>=0.23.0",
]
security = [
    "detect-secrets>=1.4.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]

[project.scripts]
newsletter = "newsletter.__main__:main"

[project.urls]
Homepage = "https://github.com/hjjung-katech/newsletter-generator"
Repository = "https://github.com/hjjung-katech/newsletter-generator"
Documentation = "https://github.com/hjjung-katech/newsletter-generator/blob/main/README.md"
"Bug Tracker" = "https://github.com/hjjung-katech/newsletter-generator/issues"

[tool.setuptools]
packages = ["newsletter"]

[tool.setuptools.package-data]
newsletter = ["templates/*.html", "templates/*.txt"]

[tool.black]
line-length = 88
target-version = ["py310"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "feedparser.*",
    "postmarker.*",
    "rq.*",
    "redis.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["newsletter"]
omit = [
    "tests/*",
    "newsletter/__main__.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.detect-secrets]
baseline = ".secrets.baseline"
filters_used = [
    { path = "detect_secrets.filters.allowlist.is_line_allowlisted" },
    { path = "detect_secrets.filters.common.is_baseline_file" },
    { path = "detect_secrets.filters.common.is_ignored_due_to_verification_policies", min_level = 2 },
    { path = "detect_secrets.filters.heuristic.is_indirect_reference" },
    { path = "detect_secrets.filters.heuristic.is_likely_id_string" },
    { path = "detect_secrets.filters.heuristic.is_lock_file" },
    { path = "detect_secrets.filters.heuristic.is_not_alphanumeric_string" },
    { path = "detect_secrets.filters.heuristic.is_potential_uuid" },
    { path = "detect_secrets.filters.heuristic.is_prefixed_with_dollar_sign" },
    { path = "detect_secrets.filters.heuristic.is_sequential_string" },
    { path = "detect_secrets.filters.heuristic.is_swagger_file" },
    { path = "detect_secrets.filters.heuristic.is_templated_secret" },
]

exclude_files = [
    ".secrets.baseline",
    ".*\\.lock$",
    ".*\\.log$",
    ".*\\.pyc$",
    ".*/__pycache__/.*",
    ".git/.*",
    ".pytest_cache/.*",
    ".venv/.*",
    "htmlcov/.*",
    "node_modules/.*",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--cov=newsletter",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "email: marks tests that involve email functionality",
    "real_api: marks tests that require real API calls",
    "mock_api: marks tests that use mocked API responses",
    "e2e: marks end-to-end tests",
    "deployment: marks deployment-related tests",
    "manual: marks manual tests that require specific setup",
]
